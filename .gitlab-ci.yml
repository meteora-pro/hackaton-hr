stages:
  - increment-version-api
  - increment-version-fe
  - build
  - deploy

.node: &node
  image: node:10

.increment: &increment
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /Increment version/

# API SERVICE
.only-api-changes: &only-api-changes
  changes:
    - libs/**/*
    - tools/**/*
    - deploy/api/**/*
    - apps/api/**/*

.only-api: &only-api
  only:
    <<: *only-api-changes

.only-api-tags: &only-api-tags
  only:
    changes:
      - apps/api/package.json
    variables:
      - $CI_COMMIT_MESSAGE =~ /Increment version api/
  except:
    - tags

.increment-api: &increment-api
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /Increment version api/

.branches-api: &branches-api
  only:
    <<: *only-api-changes
  except:
    - master
    - tags

# FE SERVICE
.only-fe-changes: &only-fe-changes
  changes:
    - libs/**/*
    - tools/**/*
    - deploy/fe/**/*
    - apps/fe/**/*

.only-fe: &only-fe
  only:
    <<: *only-fe-changes

.only-fe-tags: &only-fe-tags
  only:
    changes:
      - apps/fe/package.json
    variables:
      - $CI_COMMIT_MESSAGE =~ /Increment version fe/
  except:
    - tags

.increment-fe: &increment-fe
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /Increment version fe/

.branches-fe: &branches-fe
  only:
    <<: *only-fe-changes
  except:
    - master
    - tags

########################################
#          INCREMENT VERSION           #
########################################
increment-version-api:
  <<: *increment
  <<: *node
  only:
    <<: *only-api-changes
    refs:
      - master
  stage: increment-version-api
  variables:
    CI_REPOSITORY_URL: https://$GIT_ACCESS_USER:$ACCESS_TOKEN_FOR_PUSH@gitlab.com/$CI_PROJECT_PATH.git
  script:
    - git config --global http.postBuffer 157286400
    - git config user.name $GIT_ACCESS_USER
    - git config user.email $GITLAB_USER_EMAIL
    - git pull origin master
    - cd apps/api
    - export GIT_TAG_VERSION=api-release-$(npm --no-git-tag-version version patch)
    - cd ../..
    - export PROJECT_VERSION=$(egrep -o '[[:digit:]]{1,}\.[[:digit:]]{1,}\.[[:digit:]]{1,}' ./apps/api/package.json | head -n1)
    - echo $PROJECT_VERSION > apps/api/version
    - sed -i -- "s/appVersion:[[:space:]][[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+/appVersion:\ $PROJECT_VERSION/g" ./deploy/api/Chart.yaml
    - echo $(git push --delete $CI_REPOSITORY_URL $GIT_TAG_VERSION) || true
    - git add . && git commit -m "[Increment version api $GIT_TAG_VERSION]"
    - git tag $GIT_TAG_VERSION
    - git pull origin master
    - git push $CI_REPOSITORY_URL HEAD:master
    - echo $(git push --tags $CI_REPOSITORY_URL HEAD:$CI_COMMIT_REF_NAME) || true

increment-version-fe:
  <<: *increment
  <<: *node
  only:
    <<: *only-fe-changes
    refs:
      - master
  stage: increment-version-fe
  variables:
    CI_REPOSITORY_URL: https://$GIT_ACCESS_USER:$ACCESS_TOKEN_FOR_PUSH@gitlab.com/$CI_PROJECT_PATH.git
  script:
    - git config --global http.postBuffer 157286400
    - git config user.name $GIT_ACCESS_USER
    - git config user.email $GITLAB_USER_EMAIL
    - git pull origin master
    - cd apps/fe
    - export GIT_TAG_VERSION=fe-release-$(npm --no-git-tag-version version patch)
    - cd ../..
    - export PROJECT_VERSION=$(egrep -o '[[:digit:]]{1,}\.[[:digit:]]{1,}\.[[:digit:]]{1,}' ./apps/fe/package.json | head -n1)
    - echo $PROJECT_VERSION > apps/fe/version
    - sed -i -- "s/appVersion:[[:space:]][[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+/appVersion:\ $PROJECT_VERSION/g" ./deploy/fe/Chart.yaml
    - echo $(git push --delete $CI_REPOSITORY_URL $GIT_TAG_VERSION) || true
    - git add . && git commit -m "[Increment version fe $GIT_TAG_VERSION]"
    - git tag $GIT_TAG_VERSION
    - git pull origin master
    - git push $CI_REPOSITORY_URL HEAD:master
    - echo $(git push --tags $CI_REPOSITORY_URL HEAD:$CI_COMMIT_REF_NAME) || true

########################################
#                BUILD                 #
########################################
.build: &build
  image: andreymaznyak/docker-git-perl:latest
  stage: build
  variables:
    GIT_STRATEGY: clone
  services:
    - docker:18.09.7-dind
  before_script:
    - echo "registry=$NPM_REGISTRY" > .npmrc
# master
build-image-api:
  <<: *build
  <<: *only-api-tags
  script:
    - export PROJECT_VERSION=api-$(cat apps/api/version)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -f deploy/api/Dockerfile -t $CI_REGISTRY_IMAGE:$PROJECT_VERSION -t $CI_REGISTRY_IMAGE:api-latest .
    - docker push $CI_REGISTRY_IMAGE:$PROJECT_VERSION
    - docker push $CI_REGISTRY_IMAGE:api-latest

# master
build-image-fe:
  <<: *build
  <<: *only-fe-tags
  script:
    - export PROJECT_VERSION=fe-$(cat apps/fe/version)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build  -f deploy/fe/Dockerfile -t $CI_REGISTRY_IMAGE:$PROJECT_VERSION -t $CI_REGISTRY_IMAGE:fe-latest .
    - docker push $CI_REGISTRY_IMAGE:$PROJECT_VERSION
    - docker push $CI_REGISTRY_IMAGE:fe-latest

build-review-fe:
  <<: *build
  <<: *branches-fe
  script:
    - export PROJECT_VERSION=fe-$CI_BUILD_REF_SLUG
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build  -f deploy/fe/Dockerfile -t $CI_REGISTRY_IMAGE:$PROJECT_VERSION .
    - docker push $CI_REGISTRY_IMAGE:$PROJECT_VERSION

########################################
#                DEPLOY                #
########################################
.deploy: &deploy
  image: registry.gitlab.com/meteora-pro/secure/it:deploy-kit-helm3
  stage: deploy
  variables:
    KUBECONFIG: /etc/deploy/config

# review
deploy-on-review-fe:
  <<: *deploy
  <<: *branches-fe
  before_script:
    - mkdir -p /etc/deploy
    - echo ${staging_config} | base64 -d > ${KUBECONFIG}
  script:
    # define variable
    - export PROJECT_VERSION=fe-$CI_BUILD_REF_SLUG
    - export RELEASE_NAME="fe-review-hackaton-$CI_BUILD_REF_SLUG"
    - export DEPLOYS=$(helm ls -n hr-hackaton | grep $RELEASE_NAME | wc -l)
    - cd deploy/fe
    - if [ ${DEPLOYS}  -eq 0 ]; then echo "fisrt install"; else helm del -n hr-hackaton ${RELEASE_NAME}; fi
    - helm install -n hr-hackaton --set image.tag=$PROJECT_VERSION --set ingress.tls[0].secretName=review-shelter-fe-$CI_BUILD_REF_SLUG-tls-cert --set ingress.tls[0].hosts[0]=$CI_BUILD_REF_SLUG.dev.meteora.pro --set ingress.hosts[0].host=$CI_BUILD_REF_SLUG.dev.meteora.pro --set ingress.hosts[0].paths[0]="/" ${RELEASE_NAME} .
  environment:
    name: review-shelters-fe/$CI_BUILD_REF_NAME
    url: https://$CI_BUILD_REF_SLUG.dev.meteora.pro/
    on_stop: stop_review_fe

stop_review_fe:
  <<: *deploy
  <<: *branches-fe
  before_script:
    - mkdir -p /etc/deploy
    - echo ${staging_config} | base64 -d > ${KUBECONFIG}
    - export PROJECT_VERSION=fe-$CI_BUILD_REF_SLUG
  script:
    - export RELEASE_NAME="fe-review-hackaton-$CI_BUILD_REF_SLUG"
    - export DEPLOYS=$(helm ls -n hr-hackaton | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then echo "environments is not started" && exit 1; else helm del -n hr-hackaton ${RELEASE_NAME}; fi
  when: manual
  variables:
    GIT_STRATEGY: none
  environment:
    name: review-shelters-fe/$CI_BUILD_REF_NAME
    action: stop

# staging
deploy-on-staging-api:
  <<: *deploy
  <<: *only-api-tags
  before_script:
    - mkdir -p /etc/deploy
    - echo ${staging_config} | base64 -d > ${KUBECONFIG}
  script:
    # define variable
    - export OLD_PROJECT_VERSION=v$(egrep -o '[[:digit:]]{1,}\.[[:digit:]]{1,}\.[[:digit:]]{1,}' package.json | head -n1)
    - export PROJECT_VERSION=api-$(cat apps/api/version)
    - export RELEASE_NAME="api-hackaton"
    - export DEPLOYS=$(helm ls -n hr-hackaton | grep $RELEASE_NAME | wc -l)
    - cd deploy/api
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install -n hr-hackaton --set image.tag=$PROJECT_VERSION ${RELEASE_NAME} .; else helm upgrade -n hr-hackaton --set image.tag=$PROJECT_VERSION ${RELEASE_NAME} .; fi
  environment:
    name: staging-hr-hackaton-api
    url: https://api-hr-hackaton.dev.meteora.pro/api/version

# staging
deploy-on-staging-fe:
  <<: *deploy
  <<: *only-fe-tags
  before_script:
    - mkdir -p /etc/deploy
    - echo ${staging_config} | base64 -d > ${KUBECONFIG}
  script:
    # define variable
    - export OLD_PROJECT_VERSION=v$(egrep -o '[[:digit:]]{1,}\.[[:digit:]]{1,}\.[[:digit:]]{1,}' package.json | head -n1)
    - export PROJECT_VERSION=fe-$(cat apps/fe/version)
    - export RELEASE_NAME="fe-staging-hackaton"
    - export DEPLOYS=$(helm ls -n hr-hackaton | grep $RELEASE_NAME | wc -l)
    - cd deploy/fe
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install -n hr-hackaton --set image.tag=$PROJECT_VERSION ${RELEASE_NAME} .; else helm upgrade -n hr-hackaton --set image.tag=$PROJECT_VERSION ${RELEASE_NAME} .; fi
  environment:
    name: dev-hr-hackaton-fe
    url: https://lk.dev.meteora.pro
